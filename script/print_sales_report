#!/usr/bin/env ruby -w
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", "lib")))
require 'webconnex_api'


require 'rubygems'
gem 'activesupport', '~> 7.0'
require 'active_support/core_ext/object/blank'

if ENV["VERBOSE"].present?
  require 'logger'

  require 'http_logger'
  HttpLogger.logger = Logger.new($stdout)
  HttpLogger.log_headers = true
end

if ENV["WEBCONNEX_API_KEY"].blank?
  raise "Error: environment missing WEBCONNEX_API_KEY"
end
WEBCONNEX_API_KEY = ENV["WEBCONNEX_API_KEY"]


def main
  successes = ARGV.map do |show_name|
    print_inventory_report_for_show_name(show_name)
  end
  exit 0 if successes.all?
  exit 1
end

def print_inventory_report_for_show_name(name)
  forms = WebconnexAPI::Form.all
  shows = forms.select { |f| f.name == name && f.published? }.reverse

  if shows.none?
    $stderr.puts "No published shows found called #{name.inspect}\n\n"
    return false
  end

  shows.each do |show|
    puts "#{show.name} (#{show.first_performance_date.year}):\n\n"

    last_date = nil
    total_irs = show.inventory_records.
                  select(&:single_performance_total_sales_record?).
                  sort_by { |total_ir|
                    total_ir.event_has_date_but_no_time? ?
                      total_ir.event_date.to_time :
                      total_ir.event_time
                  }
    total_irs.each do |total_ir|
      next if total_ir.none_sold?

      this_date = total_ir.event_date
      if !last_date.nil? && this_date - last_date > 1
        puts "\n\n"
      elsif !last_date.nil? && this_date != last_date
        puts
      end
      if last_date.nil? || last_date != this_date
        print this_date.strftime("    %a, %b %e at ")
      elsif last_date == this_date
        print "                   "
      end

      if total_ir.event_has_date_but_no_time?
        print "no time: "
      else
        print total_ir.event_time.strftime("%l:%M%P: ")
      end
      puts "#{total_ir.sold.to_s.rjust(total_ir.quantity.to_s.length)} / #{total_ir.quantity}"
      last_date = this_date
    end

    puts "\n\n"
    percent_sold = show.total_tickets_sold.to_f / show.total_tickets_available * 100
    puts "    Total sold: #{show.total_tickets_sold} / #{show.total_tickets_available} (#{percent_sold.round(1)}%)\n\n"
  end
end

main
