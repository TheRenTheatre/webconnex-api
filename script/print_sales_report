#!/usr/bin/env ruby -w
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", "lib")))
require 'webconnex_api'

require 'rubygems'
begin
  gem 'activesupport', '~> 7.0'
  require 'active_support/core_ext/object/blank'
rescue Gem::MissingSpecError => e
  $stderr.puts e.message
  $stderr.puts "This test script uses activesupport, but the gem doesn't. Install it manually."
  exit 1
end

gem 'awesome_print', '~> 1.9'
require 'awesome_print'

require 'optparse'
options = {}
optparse = OptionParser.new do |parser|
  parser.banner = "Usage: #{$0} [options] show_name"

  parser.on("-l", "--[no-]log", "Print basic log line for each HTTP request and response")
  parser.on("-L", "--[no-]verbose-log", "Print full API requests and responses")
  parser.on(      "--[no-]ticket-levels", "Include a ticket breakdown by ticket level")
  parser.on("-f", "--[no-]form-details", "Print internal details (Form's ID, eventType, startTime)")
  parser.on(      "--[no-]inventory-records", "Print more internal details (inventory record listing)")
  parser.on(      "--year YEAR", "Limit results to shows running in this year")
  parser.on(      "--[no-]upcoming-only", "Only print details for upcoming performances")
end
optparse.parse!(into: options)
options.dup.each do |k, v|
  if k.to_s.include?("-")
    options.delete(k)
    options[k.to_s.gsub("-", "_").to_sym] = v
  end
end


if options[:log] || options[:verbose_log]
  require 'logger'

  begin
    gem 'http_logger', '~> 0.7'
    require 'http_logger'
  rescue Gem::MissingSpecError => e
    $stderr.puts e.message
    $stderr.puts "This test script uses http_logger, but the gem doesn't. Install it manually."
    exit 1
  end
  HttpLogger.logger = Logger.new($stderr)
  if options[:verbose_log]
    HttpLogger.log_request_body = HttpLogger.log_response_body = HttpLogger.log_headers = true
    HttpLogger.level = :debug
    HttpLogger.collapse_body_limit = 0
  elsif options[:log]
    HttpLogger.log_request_body = HttpLogger.log_response_body = HttpLogger.log_headers = false
    HttpLogger.level = :info
  end
end

if ENV["WEBCONNEX_API_KEY"].blank?
  raise "Error: environment missing WEBCONNEX_API_KEY"
elsif ENV["WEBCONNEX_API_KEY"] !~ /^[0-9a-f]{32}$/
  raise "Error: WEBCONNEX_API_KEY is set but does not match the expected format"
end
WEBCONNEX_API_KEY = ENV["WEBCONNEX_API_KEY"]

# This is your Redis DB number on localhost. I wouldn't re-use a database with
# other data in it.
WebconnexAPI.cache_options = {db: 2}

def main(options)
  if ARGV.blank?
    raise "Error: specify at least one show name"
  end
  successes = ARGV.map do |show_name|
    print_inventory_report_for_show_name(show_name,
                                         year: options[:year],
                                         print_form_details: options[:form_details],
                                         print_inventory_records: options[:inventory_records],
                                         print_ticket_levels: options[:ticket_levels],
                                         print_upcoming_only: options[:upcoming_only])
  end
  exit 0 if successes.all?
  exit 1
end

def print_inventory_report_for_show_name(name, options)
  forms = WebconnexAPI::Form.all
  shows = forms.select { |f| f.name.downcase == name.downcase &&
                             f.published? }.reverse
  if options[:year].present?
    shows.select! { |f| f.any_performances_during_year?(options[:year].to_i) }
  end

  if shows.none?
    $stderr.puts "No published shows found called #{name.inspect}\n\n"
    return false
  end

  shows.each do |show|
    puts "#{show.name} (#{show.first_performance_date.year})"

    if options[:print_upcoming_only] && show.last_performance_date < Time.now
      puts "\n\n"
      next 
    end

    if options[:print_form_details]
      puts "          Form ID: \033[2;38m#{show.id}\e[0m"
      puts "       Event type: \033[2;38m#{show.event_type}\e[0m"
      puts "      Event start: \033[2;38m#{show.event_start}\e[0m"
      puts "           Status: \033[2;38m#{show.status}\e[0m"
      puts "    Ticket levels: \033[2;38m#{show.ticket_level_names.join(', ')}\e[0m\n\n"
    end

    last_date = nil
    if options[:print_inventory_records]
      puts "    Inventory records:"
      show.inventory_records.sort_by { |ir| [ir.name.to_s, ir.key.to_s] }.each do |ir|
        print "    \033[2;38m"; ap ir.to_h.except(:dateCreated, :form_id, :dateUpdated), multiline: false, ruby19_syntax: true; print "\e[0m"
      end
    end
    puts

    total_irs = show.inventory_records.
                  select(&:single_performance_total_sales_record?).
                  sort_by { |total_ir|
                    total_ir.event_has_date_but_no_time? ?
                      total_ir.event_date.to_time :
                      total_ir.event_time
                  }
    total_irs.each do |total_ir|
      next if total_ir.none_sold? && total_ir.past?

      this_date = total_ir.event_date
      if !last_date.nil? && this_date - last_date > 1
        puts "\n\n"
      elsif !last_date.nil? && this_date != last_date
        puts
      end
      if last_date.nil? || last_date != this_date
        print this_date.strftime("    \033[004m%a, %b %e at \e[0m")
      elsif last_date == this_date
        print "                   "
      end

      count = show.tickets_for_event_date(total_ir.event_time).count
      amount_cents = show.tickets_for_event_date(total_ir.event_time).sum(&:amount_cents)
      print total_ir.event_time.strftime("\033[004m%l:%M%P:\e[0m ")
      print "#{count.to_s.rjust(total_ir.quantity.to_s.length)} / #{total_ir.quantity}   "
      revenue_width = (show.total_revenue_cents / 100.0).round(0).to_s.length + 3
      if count > 0
        print "                      avg price: " + sprintf("$%6.2f", amount_cents / count / 100.0) +
              "      total: " + sprintf("$%#{revenue_width}.2f", amount_cents / 100.0)
      end

      if options[:print_upcoming_only] && total_ir.event_time <= Time.now
        puts
        next
      end

      # Ticket level breakdown
      level_label_width = show.ticket_level_names.map(&:length).max
      label_to_data = {}
      show.tickets_for_event_date(total_ir.event_time).each do |t|
        label_to_data[t.level_label] ||= {count: 0, total_amount_cents: 0}
        label_to_data[t.level_label][:count] += 1
        label_to_data[t.level_label][:total_amount_cents] += t.amount_cents
      end
      if options[:print_ticket_levels] && show.name == "54"
        labels_that_mean_54 = ["$54 for 54: Two Experiences, One Amazing Night", "DOUBLE DISCOUNT Tickets", "54 General Admission",
                               "54 DISCOUNT Tickets", "54 VIP Experience", "54 General Admission AND After Hours", "54 Discount Tickets"]
        labels_that_mean_ah = ["$54 for 54: Two Experiences, One Amazing Night", "DOUBLE DISCOUNT Tickets", "54 After Hours Only",
                               "54 After Hours Only  DISCOUNT Tickets", "54 VIP Experience", "54 General Admission AND After Hours",
                               "54 After Hours DISCOUNT Tickets"]
        labels_that_are_passes = ["The Glitter Pass", "Repeat Offenders: The Glitter Pass"]

        show_count = ah_count = pass_count = 0
        label_to_data.each do |level_label, level_data|
          show_count += level_data[:count] if labels_that_mean_54.include?(level_label)
          ah_count += level_data[:count] if labels_that_mean_ah.include?(level_label)
          pass_count += level_data[:count] if labels_that_are_passes.include?(level_label)
          raise "Unknown ticket level: #{level_label.inspect}" unless (labels_that_mean_54 + labels_that_mean_ah + labels_that_are_passes).include?(level_label)
        end
        print "\n                        54: #{show_count.to_s.rjust(3)}\n" +
              "            54 After-Hours: #{ah_count.to_s.rjust(3)}"
      end
      if options[:print_ticket_levels]
        puts
        label_to_data.sort_by { |l, d| -d[:count] }.each do |level_label, level_data|
          print "\n        \033[2;38m#{level_label.rjust(level_label_width)}: #{level_data[:count].to_s.rjust(2)}" +
                "   (avg price: " + sprintf("$%6.2f", level_data[:total_amount_cents] / level_data[:count] / 100.0) +
                ", sub-total: " + sprintf("$%7.2f", level_data[:total_amount_cents] / 100.0) + ")\e[0m"
        end
        puts "\n\n"
      end

      last_date = this_date
    end

    if show.single?
      total_ir = show.inventory_records.find(&:overall_capacity_record?)
      this_date = show.event_start
      count = show.tickets_for_event_date(total_ir.event_date).count
      amount_cents = show.tickets_for_event_date(total_ir.event_date).sum(&:amount_cents)

      print this_date.strftime("    %a, %b %e at %l:%M%P: ")
      print "#{show.tickets_for_event_date(show.event_start).count.to_s.rjust(total_ir.quantity.to_s.length)} / #{total_ir.quantity}   "
      if count > 0
        print "\033[2;38mavg price: " + sprintf("$%.2f", amount_cents / count / 100.0) +
              "    total: " + sprintf("$%.2f", amount_cents / 100.0) + "\e[0m"
      end
    end

    puts "\n\n\n"
    past_percent_sold     = (show.total_past_tickets_sold.to_f     / show.total_past_tickets_available     * 100).round(1)
    upcoming_percent_sold = (show.total_upcoming_tickets_sold.to_f / show.total_upcoming_tickets_available * 100).round(1)
    total_percent_sold    = (show.total_tickets_sold.to_f          / show.total_tickets_available          * 100).round(1)

    width = show.total_tickets_available.to_s.length
    revenue_width = (show.total_revenue_cents / 100.0).round(0).to_s.length + 3
    percent_sold_width = [past_percent_sold, upcoming_percent_sold, total_percent_sold].reject(&:nan?).max.to_i / 100 + 4
    format_string = "    %13s: %#{width}d / %#{width}d (%#{percent_sold_width}.1f%%)                    \033[2;38mrevenue: $%#{revenue_width}.2f\e[0m"
    puts format_string % ["Past sold",     show.total_past_tickets_sold,     show.total_past_tickets_available,     past_percent_sold,     show.past_revenue_cents / 100.0]
    puts format_string % ["Upcoming sold", show.total_upcoming_tickets_sold, show.total_upcoming_tickets_available, upcoming_percent_sold, show.upcoming_revenue_cents / 100.0]
    puts
    puts format_string % ["Total",         show.total_tickets_sold,          show.total_tickets_available,          total_percent_sold,    show.total_revenue_cents / 100.0]
    puts "\n\n"
  end
end

main(options)
